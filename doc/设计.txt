
服务器同步.

同步:
1. noteid groupid都由客服端生成GUID,然后提交到后端。后端只是记录用
2.提交服务端必须将所有相关修改一同提交，不能分条提交，以保证note和group变更。
3.删除，本地删除需要保留删除记录，当提交到服务器后即可放弃删除记录。
4.增加，当服务器上有，而本地没有该信息时为新增。
5.修改，当服务器的版本号小于本地时，表示可安全更新到本地，不会冲突，当服务器版本号大于本地时，表示会有冲突。

需要有3个属性,
id:int 自增加字段,索引时用
nid:String,暂定为GUID,标示唯一记录,未在服务端时为0,提交到服务端后,由服务端创建唯一nid,并返回客户端,客户端更新此nid.
ver:int,版本号由1开始,自增加,标示修改记录,只保存最后修改的,提交时,服务端再生成+1的版本号,然后更新到提交方,更新时版本好大的覆盖小的.
但是这样也会有一个问题,多个客户端同事修改就有问题了.


缺陷:
	版本号这块,如果多个客户端共同修改,将会有问题.
	比如
	1.A修改了note1,未提交.自动生成新ver:2
	2.B修改了note1,未提交,自动生成新ver:2
	3.A提交,服务端生成3,并更新A.
	4.B更新,将覆盖B在step2所做的修改.
	
	

group表:
	id:自增加
	gid:String 组id, '0' 表示未向服务端提交过.
	ver:int 版本号 每次修改自+1(isModify为true时不增加)
	sync:Boolean 已经同步到服务器,如果未同步过将可以提交到服务器
	
note表:
	id:自增加
	nid:String 便签id, '-1':未在本地保存过 '0':未提交到服务器
	gid:String 所在组id 如果为数字'123',就是group.id, 否则为group.gid
	title:Strng
	content:String
	x:int
	y:int
	w:int
	h:int
	roll:int 1:显示内容 0:隐藏内容
	onTop:int 1:顶端显示 0:不在顶端显示
	visile:int 1:显示 0:隐藏
	ver:int 版本号 每次修改自+1(isModify为true时不增加)
	sync:Boolean 已经同步到服务器,如果未同步过将可以提交到服务器
	
config表:
	lang:String 语言. '' 为默认语言
	ver:String 程序版本号
	dbver:String 数据库版本号
	